function print_order_table( K, seeds, outdir, tabledir )
% This function makes a table showing all the orders.

    if nargin < 1; K = 10; end
    if nargin < 2; seeds = [0:4]; end
    if nargin < 3; outdir = 'results/'; end
    if nargin < 4; tabledir = '/homes/mlghomes/dkd23/Dropbox/papers/NIPS2011_Additive/tables/'; end


    [classification_datasets, classification_methods, ...
              regression_datasets, regression_methods] = define_datasets_and_methods();

    all_names = {};
    all_orders = {};
    for i = 1:length(classification_datasets)-2
        try
            [cur_name, cur_orders] = load_orders( classification_datasets{i}, K, seeds, outdir, 1, true );
            all_names{end+1} = cur_name;
            all_orders{end+1} = cur_orders;
        catch
            disp(lasterror);
        end
    end    
    for i = 1:length(regression_datasets)-2
        try
            [cur_name, cur_orders] = load_orders( regression_datasets{i}, K, seeds, outdir, 1, false );
            all_names{end+1} = cur_name;
            all_orders{end+1} = cur_orders;            
        catch
            disp(lasterror);
        end          
    end
    
    interesting_ones = [ 2 5 6 8 9 10 11 ];
    all_names = all_names(interesting_ones);
    all_orders = all_orders(interesting_ones);
    
    % Now make a nice table
    filename = [tabledir 'all_orders_table.tex' ];
    orders_to_latex(filename, all_names, all_orders, 10 );
end

function [nicename, add_orders] = load_orders( dataset_name, K, seeds, outdir, fold, classification)
  
    if classification == false
        add_method = @gp_add_lo;
    else
        add_method = @gp_add_class_lo;
    end
    
    [pathstr, nicename, ext, versn] = fileparts( dataset_name );
    nicename = shorten_names( nicename );
    
    % Find the filename where the ADD hyperparameters should be stored.
    filename = run_one_fold( dataset_name, add_method, K, fold, seeds(1), outdir, true );
    
    % Load dataset to get D
    load(dataset_name)
    [N,D] = size(X);
    
    % Load and parse ADD hyperparameters.
    results = load( filename );
    [add_lengthscales, add_orders] = ...
        sort_additive_hypers_lo(D, results.model.hypers.cov);
end

function nicename = shorten_names( nicename )
    nicename = strrep(nicename, '_', ' ' );
    nicename = strrep(nicename, '0', '' );
    nicename = strrep(nicename, '1', '' );
    nicename = strrep(nicename, '2', '' );
    nicename = strrep(nicename, '3', '' );
    nicename = strrep(nicename, '4', '' );
    nicename = strrep(nicename, '5', '' );
    nicename = strrep(nicename, '6', '' );
    nicename = strrep(nicename, '7', '' );
    nicename = strrep(nicename, '8', '' );
    nicename = strrep(nicename, '9', '' );        
    nicename = strrep(nicename, 'synth ', '' );
    nicename = strrep(nicename, 'c ', '' );
    nicename = strrep(nicename, 'r ', '' );
    nicename = strrep(nicename, 'sola', 'solar' );
    nicename = strrep(nicename, 'pumadyn', 'pumadyn-8nh' );
    nicename = strtrim(nicename);
end



function orders_to_latex(filename, names, orders, num_dims )

    file = fopen( filename, 'w');

    % Print all the usual table header stuff
    fprintf(file, '%% --- Automatically generated by hypers_to_latex.m ---\n');
    fprintf(file, '%% Exported at %s\n', datestr(now()));
    fprintf(file, '\\begin{table}[h]\n');
    fprintf(file, '\\caption{{\\small\n');
    fprintf(file, 'Variance contribution of each order in the additive model, on different datasets. The maximum order of interaction is set to 10, or smaller if the input dimension less than 10.  Values are normalized to sum to 100.\n' );
    fprintf(file, '}}\n');
    fprintf(file, '\\label{tbl:all_orders}\n');
    fprintf(file, '\\begin{center}\n');
    fprintf(file, '\\begin{tabular}{r |%s}\n', repmat(' r', 1, num_dims));


    %order_words = {'1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th'
    fprintf(file, 'Order of interaction');
    for ii = 1:num_dims
      fprintf(file, ' & \\nth{%i}', ii);
    end
    %fprintf(file, ' & ');
    %fprintf(file, ' \\\\\n');
    fprintf(file, ' \\\\ \\hline\n');

    %fprintf(file, 'Dataset \\\\\n');
    
    for i = 1:length(names)
        add_orders = orders{i};
        fprintf(file, '%s ', names{i});
        for ii = 1:length(add_orders)
          fprintf(file, ' & $%3.1f $', add_orders(ii) / sum(add_orders) * 100);
        end
        for ii = length(add_orders) + 1:num_dims
            fprintf(file, ' &');
        end
        fprintf(file, ' \\\\\n');
    end
    %fprintf(file, ' & $%4.2f$ ', sum(add_orders) );
    %fprintf(file, ' \\\\ \\hline\n');
    fprintf(file, '\\end{tabular}\n');
    fprintf(file, '\\end{center}\n');
    fprintf(file, '\\end{table}\n');
    fprintf(file, '%% End automatically generated LaTeX\n');

    fclose(file);
end