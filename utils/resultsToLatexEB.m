% Ryan Turner (rt324@cam.ac.uk)

% call with:
% resultsToLatexEB(randn(40,4,3), {'foo', 'bar', 'baz', 'qux'}, {'NLL', 'RMSE', 'L1'}, 'test it', 1)
% to get:
% % --- Automatically generated by resultsToLatex.m ---
% % by Ryan Turner (rt324@cam.ac.uk)
% \begin{table}[htb]
% \caption{{\small
% [Insert description here.]
% }}
% \label{tbl:test it}
% \begin{center}
% \begin{tabular}{l | r r r r r r}
% Method & NLL $\times 10^{0}$ & p-value & RMSE $\times 10^{0}$ & p-value & L1 $\times 10^{0}$ & p-value \\ \hline
% bar & $\mathbf{0.00 \pm 0.30}$ & 0.8842 & 0.32$\pm$0.36 & 0.0734 & 0.14$\pm$0.32 & 0.1754 \\
% baz & 0.27$\pm$0.38 & 0.4694 & -0.16$\pm$0.35 & 0.6958 & 0.04$\pm$0.29 & 0.3087 \\
% foo & 0.25$\pm$0.30 & N/A & -0.04$\pm$0.35 & N/A & $\mathbf{-0.07 \pm 0.33}$ & N/A \\
% qux & 0.08$\pm$0.38 & 0.7583 & $\mathbf{-0.17 \pm 0.27}$ & 0.7369 & -0.03$\pm$0.34 & 0.4429 \\
% \end{tabular}
% \end{center}
% \end{table}
% % End automatically generated LaTeX
function resultsToLatexEB(results, methodNames, metricNames, ...
  experimentName, starMethod)

% Add extra column for p-value comparing each method to starMethod
printPval = true;
% 1 - coverage, for error bars on loss. Usually we use 95% error bars.
sigLevel = .05;
% Usually we thold p-values to not bother writing anything more extreme
% than 0.0001 => use max digits = 4. (3 is sometimes used, too)
PvalDigits = 4;
% This is maximum digits left of the dot AFTER shifting the column over by
% the exponent from fixMatrix(). Note that MaxLeftDigits is not the same as
% maxSigFigs.
maxLeftDigits = 3;
% Sort the rows of the table for lowest loss on top, or alphabetic order.
sortMethods = true;
% Sort the rows by method name alphabetically, not by lowest loss.
useAlphabeticSort = true;
% Shift any NLL column scores such that the best method has NLL = 0.
shiftNLL = true;

pvalFormat = ['%.' num2str(PvalDigits) 'f'];
minPval = 10 ^ (-PvalDigits);
maxClip = 10 ^ maxLeftDigits;

[testpoints methods metrics] = size(results);

assert(length(methodNames) == methods);
assert(length(metricNames) == metrics);

meanScore = zeros(methods, metrics);
errorBar = zeros(methods, metrics);
pval = zeros(methods, metrics);
maxClipCol = zeros(metrics, 1);

for jj = 1:metrics
  for ii = 1:methods
    % Get the best esimate of the loss and the error bars
    [h, p, ci] = ttest(results(:, ii, jj), 0, sigLevel);
    meanScore(ii, jj) = mean(ci);
    errorBar(ii, jj) = ci(2) - meanScore(ii, jj);
    
    % get the p-val comparing it to star method
    [h, pval(ii, jj)] = ttest2(results(:, starMethod, jj), ...
      results(:, ii, jj), sigLevel, 'left', 'unequal');
  end
  
  % Only differences meaningfull in NLL for continuous vars => might as
  % well shift to make it more readable.
  if strcmp(metricNames{jj}, 'NLL') && shiftNLL
    meanScore(:, jj) = meanScore(:, jj) - min(meanScore(:, jj));
  end
end
assert(isKosher(meanScore));
assert(isKosher(errorBar + eps, true));
%assert(isKosher(pval));

% Sort so method with best (lowest) score on metric-1 will be on top row
if sortMethods
  if useAlphabeticSort
    [tmp, idx] = sort(methodNames);
  else
    [tmp, idx] = sort(meanScore(:, 1), 'ascend');
  end
  methodNames = methodNames(idx);
  meanScore = meanScore(idx, :);
  errorBar = errorBar(idx, :);
  pval = pval(idx, :);
  starMethod = find(idx == starMethod);
end

% argmin might have trouble if methods is singleton. TODO fix
best = squeeze(argmin(meanScore));

% Crop the error bars to two digits, shift everything to right exponent, and
% crop the scores to match the error bars.
[meanScore, errorBar, exponent, prec] = fixMatrix(meanScore, errorBar);
assert(isKosher(meanScore));
assert(isKosher(errorBar));
assert(isKosher(exponent));
assert(isKosher(prec));

% Print all the usual table header stuff
fprintf('%% --- Automatically generated by resultsToLatex.m ---\n');
fprintf('%% by Ryan Turner (rt324@cam.ac.uk)\n');
fprintf('%% Exported at %s\n', datestr(now()));
fprintf('\\begin{table}[htb]\n');
fprintf('\\caption{{\\small\n');
fprintf('[Insert description here.]\n');
fprintf('}}\n');
fprintf('\\label{tbl:%s}\n', experimentName);
fprintf('\\begin{center}\n');
fprintf('\\begin{tabular}{l |%s}\n', repmat(' r', 1, (1+printPval) * metrics));

% first line
fprintf('Method');
for ii = 1:metrics
  fprintf(' & %s $\\times 10^{%d}$', metricNames{ii}, -exponent(ii));
  if printPval
    fprintf(' & p-value');
  end
  
  % We don't want the clip to be so small even the best method gets clipped
  orderMagBest = exp10(ceil(log10(max(min(meanScore(:, ii)), 0))));
  assert(isKosher(orderMagBest));
  maxClipCol(ii) = max(maxClip, orderMagBest);
end
fprintf(' \\\\ \\hline\n');
assert(isKosher(maxClipCol));

% for each method
for ii = 1:methods
  fprintf(methodNames{ii});
  for jj = 1:metrics
    printFormat = ['%.' num2str(max(-prec(ii, jj), 0)) 'f'];
    
    if best(jj) == ii
      fprintf([' & $\\mathbf{' printFormat ' \\pm ' printFormat '}$'], ...
        meanScore(ii, jj), errorBar(ii, jj));
    elseif meanScore(ii, jj) > maxClipCol(jj)
      fprintf(' & $>$ %d', maxClipCol(jj));
    else
      fprintf([' & ' printFormat '$\\pm$' printFormat], ...
        meanScore(ii, jj), errorBar(ii, jj));
    end
    
    % add p-value column
    if printPval
      if starMethod == ii
        fprintf(' & N/A');
      elseif pval(ii, jj) >= minPval
        fprintf([' & ' pvalFormat], pval(ii, jj));
      else
        fprintf([' & $<$' pvalFormat], minPval);
      end
    end
  end
  fprintf(' \\\\\n');
end

fprintf('\\end{tabular}\n');
fprintf('\\end{center}\n');
fprintf('\\end{table}\n');
fprintf('%% End automatically generated LaTeX\n');